{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","Fragment","className","params","style","padding","fontSize","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAkFeA,EA9Ef,uKAEQ,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAWC,UAAW,YAAaC,OAAQ,CACvC,UAAa,CACT,OAAU,CACN,MAAS,KAEb,KAAQ,CACJ,MAAS,IAGjB,cAAiB,CACb,OAAU,CACN,QAAW,CACP,QAAU,EACV,KAAQ,gBAMxB,yBAAKD,UAAW,YACZ,yBAAKE,MAAO,CAACC,QAAS,SAClB,wBAAIH,UAAW,QAASE,MAAO,CAACE,SAAU,UAA1C,sBACA,wBAAIJ,UAAW,QAASE,MAAO,CAACE,SAAU,SAA1C,sBAGJ,6BACA,6BACA,6BAEA,yBAAKF,MAAO,CAACC,QAAS,SAClB,wBAAIH,UAAW,UAAWE,MAAO,CAACE,SAAU,SAA5C,YACA,6BACI,uBAAGJ,UAAW,aAAd,wOAMR,yBAAKE,MAAO,CAACC,QAAS,SAClB,wBAAIH,UAAW,UAAWE,MAAO,CAACE,SAAU,SAA5C,UACA,6BACI,wBAAIJ,UAAW,aAAf,KACA,wBAAIA,UAAW,aAAf,OACA,wBAAIA,UAAW,aAAf,MACA,wBAAIA,UAAW,aAAf,OACA,wBAAIA,UAAW,aAAf,cACA,wBAAIA,UAAW,aAAf,QACA,wBAAIA,UAAW,aAAf,cACA,wBAAIA,UAAW,aAAf,iBACA,wBAAIA,UAAW,aAAf,OACA,wBAAIA,UAAW,aAAf,UACA,wBAAIA,UAAW,aAAf,aAIR,yBAAKE,MAAO,CAACC,QAAS,SAClB,wBAAIH,UAAW,UAAWE,MAAO,CAACE,SAAU,SAA5C,oBACA,6BACI,uBAAGJ,UAAW,YAAaK,KAAM,kDAC9BC,OAAQ,SAAUC,IAAK,uBAD1B,YAEA,uBAAGP,UAAW,YAAaK,KAAM,gCAC9BC,OAAQ,SAAUC,IAAK,uBAD1B,YAKR,6BACA,mCAtEpB,GAAyBC,IAAMC,WCQXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.26262deb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport Particles from \"react-particles-js\";\n\nexport class App extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Particles className={\"particles\"} params={{\n                    \"particles\": {\n                        \"number\": {\n                            \"value\": 100\n                        },\n                        \"size\": {\n                            \"value\": 3\n                        }\n                    },\n                    \"interactivity\": {\n                        \"events\": {\n                            \"onhover\": {\n                                \"enable\": true,\n                                \"mode\": \"repulse\"\n                            }\n                        }\n                    },\n                }}/>\n\n                <div className={\"backdrop\"}>\n                    <div style={{padding: \"1rem\"}}>\n                        <h1 className={\"title\"} style={{fontSize: \"10rem\"}}>Christo Stephenson</h1>\n                        <h2 className={\"title\"} style={{fontSize: \"6rem\"}}>Software Engineer</h2>\n                    </div>\n\n                    <br/>\n                    <br/>\n                    <br/>\n\n                    <div style={{padding: \"1rem\"}}>\n                        <h2 className={\"heading\"} style={{fontSize: \"4rem\"}}>About Me</h2>\n                        <div>\n                            <p className={\"paragraph\"}>I am a software developer with a passion in creating software in\n                                a variety of fields, ranging from being a full-stack web developer to an embedded\n                                systems engineer. Currently I live and work in my hometown of Perth, Australia.</p>\n                        </div>\n                    </div>\n\n                    <div style={{padding: \"1rem\"}}>\n                        <h2 className={\"heading\"} style={{fontSize: \"4rem\"}}>Skills</h2>\n                        <div>\n                            <li className={\"list-item\"}>C</li>\n                            <li className={\"list-item\"}>C++</li>\n                            <li className={\"list-item\"}>C#</li>\n                            <li className={\"list-item\"}>Git</li>\n                            <li className={\"list-item\"}>Linux/Unix</li>\n                            <li className={\"list-item\"}>Java</li>\n                            <li className={\"list-item\"}>JavaScript</li>\n                            <li className={\"list-item\"}>MySQL/MariaDB</li>\n                            <li className={\"list-item\"}>PHP</li>\n                            <li className={\"list-item\"}>Python</li>\n                            <li className={\"list-item\"}>ReactJS</li>\n                        </div>\n                    </div>\n\n                    <div style={{padding: \"1rem\"}}>\n                        <h2 className={\"heading\"} style={{fontSize: \"4rem\"}}>Where to find me</h2>\n                        <div>\n                            <a className={\"list-item\"} href={\"https://www.linkedin.com/in/christo-stephenson/\"}\n                               target={\"_blank\"} rel={\"noopener noreferrer\"}>LinkedIn</a>\n                            <a className={\"list-item\"} href={\"https://github.com/christocs/\"}\n                               target={\"_blank\"} rel={\"noopener noreferrer\"}>GitHub</a>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <br/>\n                </div>\n\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}